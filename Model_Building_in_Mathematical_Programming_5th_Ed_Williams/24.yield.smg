MODEL Yield
SET
   classes= {1 .. 3},    ! First,Business and Economy
   scenes= {1 .. 3},     ! Scenarios
   periods= {1 .. 3},    ! Weeks from take-off
   options= {1 .. 3};    ! Price levels possible
DATA
   Cap[classes]=[37,38,47],   ! Capacities per plane
   Prob[scenes]=[0.1,0.7,0.2],! Probabilities of different scenarios
   Price[periods,classes,options]  << "Pricelevs.dat",   ! Prices by Period
                                                         ! Class and option
   Dem[periods,scenes,classes,options] << "Demforc.dat", ! Demand by period
                                                         ! Scenario,Class and
                                                         ! Option
   Cost=50000;            ! Cost per plane
VARIABLES
   pone[classes,options] integer,  ! 0-1 variable indicating which price option
                                   ! to set for each class
   ptwo[scenes,classes,options] integer, ! Similarly for period 2 depending
                                         ! on scenario win period 1
   pthr[scenes,scenes,classes,options] integer, ! Similarly for period 3
                                                ! depending on scenarios
                                                ! in periods 1 and 2    
   sone[scenes,classes,options],                ! Tickets sold in period 1
                                                ! depending on scenario
   stwo[scenes,scenes,classes,options],         ! Tickets sold in period 2
                                                ! depending on scenario in
                                                ! this and previous period
   sthr[scenes,scenes,scenes,classes,options],  ! Tickets sold in period 3
                                                ! depending on on scenarios
                                                ! in this and previous periods
   rone[scenes,classes,options],                ! Revenue in period 1
   rtwo[scenes,scenes,classes,options],         ! Revenue in period 2
   rthr[scenes,scenes,scenes,classes,options],  ! Revenue in period 3
   xess[scenes,scenes,scenes,classes], ! Exess capacity allowed in each class
   xund[scenes,scenes,scenes,classes], ! Capacity reduction allowed in each class
   number integer;      ! Number of planes to send
OBJECTIVE
MAXIMIZE Eyield=sum{i in scenes,p in classes,h in options}
           Prob[i]*rone[i,p,h]
          +sum{i in scenes,j in scenes,p in classes,h in options}
           Prob[i]*Prob[j]*rtwo[i,j,p,h]
          +sum{i in scenes,j in scenes,k in scenes,p in classes,h in options}
           Prob[i]*Prob[j]*Prob[k]*rthr[i,j,k,p,h]
          -Cost*number;
CONSTRAINTS
          ! Constraints forcing revenue equal to number sold time price

          r1a{i in scenes,p in classes,h in options}:
            rone[i,p,h] <= Price[1,p,h]*sone[i,p,h],
          r1b{i in scenes,p in classes,h in options}:
            Price[1,p,h]*sone[i,p,h]-rone[i,p,h] <=
                        Price[1,p,h]*Dem[1,i,p,h]*(1-pone[p,h]),
          r2a{i in scenes,j in scenes,p in classes,h in options}:
            rtwo[i,j,p,h] <= Price[2,p,h]*stwo[i,j,p,h],
          r2b{i in scenes,j in scenes,p in classes,h in options}:
            Price[2,p,h]*stwo[i,j,p,h]-rtwo[i,j,p,h] <=
                        Price[2,p,h]*Dem[2,j,p,h]*(1-ptwo[i,p,h]),
          r3a{i in scenes,j in scenes,k in scenes,p in classes,h in options}:
            rthr[i,j,k,p,h] <= Price[3,p,h]*sthr[i,j,k,p,h],
          r3b{i in scenes,j in scenes,k in scenes,p in classes,h in options}:
            Price[3,p,h]*sthr[i,j,k,p,h]-rthr[i,j,k,p,h] <=
                        Price[3,p,h]*Dem[3,k,p,h]*(1-pthr[i,j,p,h]),

           ! Capacity limits in each class for all scenarios

           Kap{i in scenes,j in scenes,k in scenes,p in classes}:
            sum{h in options} sone[i,p,h]
           +sum{h in options} stwo[i,j,p,h]
           +sum{h in options} sthr[i,j,k,p,h] <=
            (Cap[p]*number + xess[i,j,k,p] - xund[i,j,k,p]),
!            (Cap[p]*number + xess[p] - xund[p]),

           Adjust{i in scenes,j in scenes,k in scenes}:
                   sum{p in classes} xess[i,j,k,p]
                  -sum{p in classes} xund[i,j,k,p] = 0,
!                   sum{p in classes} xess[p]
!                  -sum{p in classes} xund[p] = 0,

           ! Exactly one price option in each class
           ! Could be done by S1 sets removing need to make p***
           ! variables integer

           Lone{p in classes}: sum{h in options} pone[p,h] = 1,
           Ltwo{i in scenes,p in classes}: sum{h in options} ptwo[i,p,h] = 1,
           Lthr{i in scenes,j in scenes,p in classes}: sum{h in options}
                                                       pthr[i,j,p,h] = 1,
           ! Numbers sold cannot exceed demand

           l1s{i in scenes,p in classes,h in options}: sone[i,p,h]
                                            <= Dem[1,i,p,h]*pone[p,h], 
           l2s{i in scenes,j in scenes,p in classes,h in options}:
                              stwo[i,j,p,h] <= Dem[2,j,p,h]*ptwo[i,p,h], 
           l3s{i in scenes,j in scenes,k in scenes,p in classes,h in options}:
                            sthr[i,j,k,p,h] <= Dem[3,k,p,h]*pthr[i,j,p,h],

           ! Restrict 0-1 variables

           Bounds{p in classes,h in options}: pone[p,h] <= 1,
           Bounds{i in scenes,p in classes,h in options}: ptwo[i,p,h] <= 1,
           Bounds{i in scenes,j in scenes,p in classes, h in options}:
                                              pthr[i,j,p,h] <= 1,

           ! Class adjustments restricted to 10%

           Bounds{i in scenes,j in scenes,k in scenes,p in classes}:
                        xess[i,j,k,p] <= 0.1*Cap[p],
           Bounds{i in scenes,j in scenes,k in scenes,p in classes}:
                        xund[i,j,k,p] <= 0.1*Cap[p],
!            Bounds{p in classes}:xess[p] <= 0.1*Cap[p],
!            Bounds{p in classes}:xund[p] <= 0.1*Cap[p],
                        
                            
           ! Number of planes at most 6

           Bounds: number <= 6;
END MODEL
solve Yield;
print solution for Yield >> "Yield.sol";
quit;







