MODEL Baggage
SET
   locations = {1 .. 15}, 
   vans = {1 .. 6};
DATA
   time[locations,locations] =[0,20,25,35,65,90,84,77,86,25,35,20,44,35,82,
                               0,0,15,35,60,55,57,85,90,25,35,30,37,20,40,
                               0,0,0,30,50,70,55,50,65,10,25,15,24,20,90,
                               0,0,0,0,45,60,53,55,47,12,22,20,12,10,21,
                               0,0,0,0,0,46,15,45,75,25,11,19,15,25,25,
                               0,0,0,0,0,0,15,15,25,45,65,53,43,63,70,
                               0,0,0,0,0,0,0,17,25,41,25,33,27,45,30,
                               0,0,0,0,0,0,0,0,25,40,34,32,20,30,10,
                               0,0,0,0,0,0,0,0,0,65,70,72,61,45,13,
                               0,0,0,0,0,0,0,0,0,0,20,8,7,15,25,
                               0,0,0,0,0,0,0,0,0,0,0,5,12,45,65,   
                               0,0,0,0,0,0,0,0,0,0,0,0,14,34,56,
                               0,0,0,0,0,0,0,0,0,0,0,0,0,30,40,
                               0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,
                               0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
VARIABLES
   x[locations,locations,vans] binary, ! =1 iff van k goes i to j 
   y[locations,vans] binary, ! =1 iff van k goes to i
   d[vans] binary; ! =1 iff van k used

OBJECTIVE
   MINIMIZE Number = sum{k in vans} d[k]; ! Minimise number of vans

CONSTRAINTS


ind{i in locations,k in vans,i<>1}: y[i,k] <= d[k], ! Indicates if van k used
all{k in vans}: y[1,k] >= d[k], ! All vans used visit 1 (Heathrow)

limit{k in vans}: sum{i in locations,j in locations,i<>j,j<>1}
                              ((time[i,j]+time[j,i])*x[i,j,k]) 
                 +sum{i in locations,j in locations,i<>j,j=1}
                              (time[i,j]*x[i,j,k]) <=120,
                              ! Time limit on each van


num{i in locations,i<>1}: sum{k in vans} y[i,k] = 1,
                  ! Exactly one van to each location (except all used to 1)

into{i in locations,k in vans}: sum{j in locations,j<>i} x[j,i,k]=y[i,k],
                  ! If van k visits i then exactly 1 link in

out{i in locations,k in vans}: sum{j in locations,j<>i} x[i,j,k]=y[i,k],
                  ! If van k visits i then exactly 1 link out


! Subtour elimination constraints appended during optimisation
! Stage 1

sub1{k in vans}: x[4,14,k]+x[14,4,k]<=1,
sub2{k in vans}: x[9,15,k]+x[15,9,k]<=1,
sub3{k in vans}: x[6,8,k]+x[8,6,k]<=1,

! Stage 2

sub5{k in vans}: x[5,8,k]+x[5,13,k]+x[5,15,k]
                +x[8,13,k]+x[8,15,k]+x[13,15,k]+x[8,5,k]+x[13,5,k]+x[5,15,k]
                +x[13,8,k]+x[15,8,k]+x[15,13,k]<=3,
sub4{k in vans}: x[3,10,k]+x[10,3,k]<=1,
sub6{k in vans}: x[11,12,k]+x[12,11,k]<=1,
sub7{k in vans}: x[6,7,k]+x[7,6,k]<=1,

!Stage 3

sub8{k in vans}: x[6,7,k]+x[6,8,k]+x[6,9,k] +x[6,15,k]+x[7,8,k]+x[7,9,k]
                +x[7,15,k]+x[8,9,k]+x[8,15,k]
                +x[9,15,k]+x[7,6,k]+x[8,6,k]+x[9,6,k] +x[15,6,k]
                +x[8,7,k]+x[9,7,k] +x[15,7,k]+x[9,8,k]+x[15,8,k]
                +x[15,9,k]<=4,
sub9{k in vans}: x[5,11,k]+x[11,5,k]<=1,

!Stage 4

sub10{k in vans}: x[6,8,k]+x[6,9,k]+x[6,15,k] +x[8,9,k]+x[8,15,k]+x[9,15,k]
                +x[8,6,k]+x[9,6,k]+x[15,6,k]
                +x[9,8,k]+x[15,8,k]+x[15,9,k]<=3,
sub11{k in vans}: x[11,13,k]+x[13,11,k]<=1,
sub12{k in vans}: x[5,7,k]+x[7,5,k]<=1,

!Stage 5

sub13{k in vans}: x[5,7,k]+x[5,11,k]+x[7,11,k]+x[7,5,k]+x[11,5,k]+x[11,7,k]<=2, 

!Stage 6

sub14{k in vans}: x[8,15,k]+x[15,8,k]<=1,
sub15{k in vans}: x[3,4,k]+x[3,5,k]+x[3,10,k] +x[3,11,k]+x[3,12,k]+x[3,13,k]
                +x[4,5,k]+x[4,10,k]+x[4,11,k]
                +x[4,12,k]+x[4,13,k]+x[5,10,k]+x[5,11,k] +x[5,12,k]
                +x[5,13,k]+x[10,11,k] +x[10,12,k]+x[10,13,k]+x[11,12,k]
                +x[12,13,k]+x[4,3,k]+x[5,3,k]+x[10,3,k] +x[11,3,k]+x[12,3,k]+x[13,3,k]
                +x[5,4,k]+x[10,4,k]+x[11,4,k]
                +x[12,4,k]+x[13,4,k]+x[10,5,k]+x[11,5,k] +x[12,5,k]
                +x[13,5,k]+x[11,10,k] +x[12,10,k]+x[13,10,k]+x[12,11,k]
                +x[13,12,k]<=6,
sub16{k in vans}: x[6,7,k]+x[6,9,k]+x[7,9,k]+x[7,6,k]+x[9,6,k]+x[9,7,k]<=2, 

!Stage 7

sub17{k in vans}: x[3,4,k]+x[3,5,k]+x[3,10,k] +x[3,14,k]+x[4,5,k]+x[4,10,k]
                +x[4,14,k]+x[5,10,k]+x[5,14,k]
                +x[10,14,k]+x[4,3,k]+x[5,3,k]+x[10,3,k] +x[14,3,k]
                +x[5,4,k]+x[10,4,k] +x[14,4,k]+x[10,5,k]+x[14,5,k]
                +x[14,10,k]<=4,

!Stage 8

sub18{k in vans}: x[7,8,k]+x[8,7,k]<=1,

!Stage 9

sub19{k in vans}: x[5,11,k]+x[5,12,k]+x[11,12,k]+x[11,5,k]+x[12,5,k]+x[12,11,k]<=2, 
sub20{k in vans}: x[6,7,k]+x[6,8,k]+x[6,9,k] +x[7,8,k]+x[7,9,k]+x[8,9,k]
                +x[7,6,k]+x[8,6,k]+x[9,6,k]
                +x[8,7,k]+x[9,7,k]+x[9,8,k]<=3,

!Stage 10

sub21{k in vans}: x[5,12,k]+x[12,5,k]<=1,
sub22{k in vans}: x[8,9,k]+x[8,15,k]+x[9,15,k]+x[9,8,k]+x[15,8,k]+x[15,9,k]<=2, 
sub23{k in vans}: x[10,13,k]+x[13,10,k]<=1,

!Stage 11

sub24{k in vans}: x[7,8,k]+x[7,15,k]+x[8,15,k]+x[8,7,k]+x[15,7,k]+x[15,8,k]<=2, 
sub25{k in vans}: x[6,9,k]+x[9,6,k]<=1,

!Stage 12

sub26{k in vans}: x[3,10,k]+x[3,12,k]+x[10,12,k]+x[10,3,k]+x[12,3,k]+x[12,10,k]<=2, 
sub27{k in vans}: x[5,7,k]+x[5,11,k]+x[5,13,k] +x[7,11,k]+x[7,13,k]+x[11,13,k]
                +x[7,5,k]+x[11,5,k]+x[13,5,k]
                +x[11,7,k]+x[13,7,k]+x[13,11,k]<=3,

!Stage 13

sub28{k in vans}: x[4,10,k]+x[10,4,k]<=1,
sub29{k in vans}: x[5,6,k]+x[5,7,k]+x[6,7,k]+x[6,5,k]+x[7,5,k]+x[7,6,k]<=2, 
sub30{k in vans}: x[3,14,k]+x[14,3,k]<=1,

!Stage 14

sub31{k in vans}: x[12,13,k]+x[13,12,k]<=1,


! Symmetry breaking constraints

symm1: d[1]>=d[2],
symm2: d[2]>=d[3],
symm3: d[3]>=d[4],
symm4: d[4]>=d[5],
symm5: d[5]>=d[6];



END MODEL
solve Baggage;
print solution for Bagggage >> "Baggage.sol";
quit;
